class Headers:
    @staticmethod
    def header_subcellloaddistribution():
        return [
            "NodeId",
            "GeranCellId",
            "scld",
            "scld",
            "COMPLIANCE",
            "scldLOl",
            "scldLOl",
            "COMPLIANCE",
            "scldLUl",
            "scldLUl",
            "COMPLIANCE",
            "scldSc",
            "scldSc",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_cellloadsharing():
        return [
            "NodeId",
            "GeranCellId",
            "clsAcc",
            "clsAcc",
            "COMPLIANCE",
            "clsLevel",
            "clsLevel",
            "COMPLIANCE",
            "clsRamp",
            "clsRamp",
            "COMPLIANCE",
            "clsState",
            "clsState",
            "COMPLIANCE",
            "hoClsAcc",
            "hoClsAcc",
            "COMPLIANCE",
            "rHyst",
            "rHyst",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_channelallocandopt():
        return [
            "NodeId",
            "GeranCellId",
            "chap",
            "chap",
            "COMPLIANCE",
            "csPsAlloc",
            "csPsAlloc",
            "COMPLIANCE",
            "csPsPrio",
            "csPsPrio",
            "COMPLIANCE",
            "fPdch",
            "fPdch",
            "COMPLIANCE",
            "gprsPrio",
            "gprsPrio",
            "COMPLIANCE",
            "mc",
            "mc",
            "COMPLIANCE",
            "pdchPreempt",
            "pdchPreempt",
            "COMPLIANCE",
            "primpLim",
            "primpLim",
            "COMPLIANCE",
            "sPdch",
            "sPdch",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_channelgroup():
        return [
            "NodeId",
            "GeranCellId",
            "band",
            "band",
            "COMPLIANCE",
            "bccd",
            "bccd",
            "COMPLIANCE",
            "cbch",
            "cbch",
            "COMPLIANCE",
            "hopType",
            "hopType",
            "COMPLIANCE",
            "numReqBpc",
            "numReqBpc",
            "COMPLIANCE",
            "numReqCs3Cs4Bpc",
            "numReqCs3Cs4Bpc",
            "COMPLIANCE",
            "numReqEgprsBpc",
            "numReqEgprsBpc",
            "COMPLIANCE",
            "odpdchLimit",
            "odpdchLimit",
            "COMPLIANCE",
            "sas",
            "sas",
            "COMPLIANCE",
            "scType",
            "scType",
            "COMPLIANCE",
            "sdcch",
            "sdcch",
            "COMPLIANCE",
            "tn",
            "tn",
            "COMPLIANCE",
            "tn7Bcch",
            "tn7Bcch",
            "COMPLIANCE",
            "tnBcch",
            "tnBcch",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_dtm():
        return [
            "NodeId",
            "GeranCellId",
            "allocPref",
            "allocPref",
            "COMPLIANCE",
            "dtmState",
            "dtmState",
            "COMPLIANCE",
            "maxLapdm",
            "maxLapdm",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_dynamicfrhrmodeadaption():
        return [
            "NodeId",
            "GeranCellId",
            "dmQb",
            "dmQb",
            "COMPLIANCE",
            "dmQbAmr",
            "dmQbAmr",
            "COMPLIANCE",
            "dmQbNAmr",
            "dmQbNAmr",
            "COMPLIANCE",
            "dmQg",
            "dmQg",
            "COMPLIANCE",
            "dmQgAmr",
            "dmQgAmr",
            "COMPLIANCE",
            "dmQgNAmr",
            "dmQgNAmr",
            "COMPLIANCE",
            "dmSupp",
            "dmSupp",
            "COMPLIANCE",
            "dmtFAmr",
            "dmtFAmr",
            "COMPLIANCE",
            "dmtFNAmr",
            "dmtFNAmr",
            "COMPLIANCE",
            "dmtHAmr",
            "dmtHAmr",
            "COMPLIANCE",
            "dmtHNAmr",
            "dmtHNAmr",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_dynamichrallocation():
        return [
            "NodeId",
            "GeranCellId",
            "dha",
            "dha",
            "COMPLIANCE",
            "dtHAmr",
            "dtHAmr",
            "COMPLIANCE",
            "dtHNAmr",
            "dtHNAmr",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_gerancell():
        return [
            "NodeId",
            "GeranCellId",
            "bcchType",
            "bcchType",
            "COMPLIANCE",
            "cSysType",
            "cSysType",
            "COMPLIANCE",
            "fnOffset",
            "fnOffset",
            "COMPLIANCE",
            "irc",
            "irc",
            "COMPLIANCE",
            "state",
            "state",
            "COMPLIANCE",
            "xRange",
            "xRange",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_gerancellrelation():
        return [
            "NodeId",
            "GeranCellId",
            "GeranCellRelationId",
            "awOffset",
            "awOffset",
            "COMPLIANCE",
            "bqOffset",
            "bqOffset",
            "COMPLIANCE",
            "bqOffsetAfr",
            "bqOffsetAfr",
            "COMPLIANCE",
            "cand",
            "cand",
            "COMPLIANCE",
            "cs",
            "cs",
            "COMPLIANCE",
            "hiHyst",
            "hiHyst",
            "COMPLIANCE",
            "kHyst",
            "kHyst",
            "COMPLIANCE",
            "kOffset",
            "kOffset",
            "COMPLIANCE",
            "lHyst",
            "lHyst",
            "COMPLIANCE",
            "lOffset",
            "lOffset",
            "COMPLIANCE",
            "loHyst",
            "loHyst",
            "COMPLIANCE",
            "offset",
            "offset",
            "COMPLIANCE",
            "tRHyst",
            "tRHyst",
            "COMPLIANCE",
            "tROffset",
            "tROffset",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_gprs():
        return [
            "NodeId",
            "GeranCellId",
            "chCsDl",
            "chCsDl",
            "COMPLIANCE",
            "gprsSupState",
            "gprsSupState",
            "COMPLIANCE",
            "pskOnBcch",
            "pskOnBcch",
            "COMPLIANCE",
            "scAlloc",
            "scAlloc",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_hierarchicalcellstructure():
        return [
            "NodeId",
            "GeranCellId",
            "fastMsReg",
            "fastMsReg",
            "COMPLIANCE",
            "hcsIn",
            "hcsIn",
            "COMPLIANCE",
            "hcsOut",
            "hcsOut",
            "COMPLIANCE",
            "layer",
            "layer",
            "COMPLIANCE",
            "layerHyst",
            "layerHyst",
            "COMPLIANCE",
            "layerThr",
            "layerThr",
            "COMPLIANCE",
            "pSsTemp",
            "pSsTemp",
            "COMPLIANCE",
            "pTimTemp",
            "pTimTemp",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_idlechannelmeasurement():
        return [
            "NodeId",
            "GeranCellId",
            "icmState",
            "icmState",
            "COMPLIANCE",
            "intAve",
            "intAve",
            "COMPLIANCE",
            "limit1",
            "limit1",
            "COMPLIANCE",
            "limit2",
            "limit2",
            "COMPLIANCE",
            "limit3",
            "limit3",
            "COMPLIANCE",
            "limit4",
            "limit4",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_idlemodeandpaging():
        return [
            "NodeId",
            "GeranCellId",
            "acc",
            "acc",
            "COMPLIANCE",
            "accMin",
            "accMin",
            "COMPLIANCE",
            "agBlk",
            "agBlk",
            "COMPLIANCE",
            "att",
            "att",
            "COMPLIANCE",
            "cb",
            "cb",
            "COMPLIANCE",
            "cbq",
            "cbq",
            "COMPLIANCE",
            "cre",
            "cre",
            "COMPLIANCE",
            "crh",
            "crh",
            "COMPLIANCE",
            "cro",
            "cro",
            "COMPLIANCE",
            "maxRet",
            "maxRet",
            "COMPLIANCE",
            "mFrms",
            "mFrms",
            "COMPLIANCE",
            "nccPerm",
            "nccPerm",
            "COMPLIANCE",
            "pt",
            "pt",
            "COMPLIANCE",
            "siMsg1",
            "siMsg1",
            "COMPLIANCE",
            "siMsg7",
            "siMsg7",
            "COMPLIANCE",
            "siMsg8",
            "siMsg8",
            "COMPLIANCE",
            "t3212",
            "t3212",
            "COMPLIANCE",
            "to",
            "to",
            "COMPLIANCE",
            "tx",
            "tx",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_interranmobility():
        return [
            "NodeId",
            "GeranCellId",
            "fastRet3g",
            "fastRet3g",
            "COMPLIANCE",
            "fastRetLte",
            "fastRetLte",
            "COMPLIANCE",
            "fddMrr",
            "fddMrr",
            "COMPLIANCE",
            "fddQMin",
            "fddQMin",
            "COMPLIANCE",
            "fddQMinOff",
            "fddQMinOff",
            "COMPLIANCE",
            "fddQOff",
            "fddQOff",
            "COMPLIANCE",
            "fddRepThr2",
            "fddRepThr2",
            "COMPLIANCE",
            "fddRscpMin",
            "fddRscpMin",
            "COMPLIANCE",
            "isHoLev",
            "isHoLev",
            "COMPLIANCE",
            "qsc",
            "qsc",
            "COMPLIANCE",
            "qsci",
            "qsci",
            "COMPLIANCE",
            "qsi",
            "qsi",
            "COMPLIANCE",
            "sPrio",
            "sPrio",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_powercontroldownlink():
        return [
            "NodeId",
            "GeranCellId",
            "bsPwrMin",
            "bsPwrMin",
            "COMPLIANCE",
            "bsRPwrOffset",
            "bsRPwrOffset",
            "COMPLIANCE",
            "dBtsPcState",
            "dBtsPcState",
            "COMPLIANCE",
            "dtxD",
            "dtxD",
            "COMPLIANCE",
            "lCompDl",
            "lCompDl",
            "COMPLIANCE",
            "qCompDl",
            "qCompDl",
            "COMPLIANCE",
            "qDesDl",
            "qDesDl",
            "COMPLIANCE",
            "qDesDlAfr",
            "qDesDlAfr",
            "COMPLIANCE",
            "qDesDlAhr",
            "qDesDlAhr",
            "COMPLIANCE",
            "ssDesDl",
            "ssDesDl",
            "COMPLIANCE",
            "ssDesDlAfr",
            "ssDesDlAfr",
            "COMPLIANCE",
            "ssDesDlAhr",
            "ssDesDlAhr",
            "COMPLIANCE",
            "ssDesDlAwb",
            "ssDesDlAwb",
            "COMPLIANCE",
            "ssOffsetDl",
            "ssOffsetDl",
            "COMPLIANCE",
            "ssOffsetDlAfr",
            "ssOffsetDlAfr",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_locatingfilter():
        return [
            "NodeId",
            "GeranCellId",
            "ferLen",
            "ferLen",
            "COMPLIANCE",
            "qEvalSd",
            "qEvalSd",
            "COMPLIANCE",
            "qEvalSi",
            "qEvalSi",
            "COMPLIANCE",
            "qLenSd",
            "qLenSd",
            "COMPLIANCE",
            "qLenSi",
            "qLenSi",
            "COMPLIANCE",
            "ssEvalSd",
            "ssEvalSd",
            "COMPLIANCE",
            "ssEvalSi",
            "ssEvalSi",
            "COMPLIANCE",
            "ssLenSd",
            "ssLenSd",
            "COMPLIANCE",
            "ssLenSi",
            "ssLenSi",
            "COMPLIANCE",
            "ssRampSd",
            "ssRampSd",
            "COMPLIANCE",
            "ssRampSi",
            "ssRampSi",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_locatingintracellhandover():
        return [
            "NodeId",
            "GeranCellId",
            "iho",
            "iho",
            "COMPLIANCE",
            "maxIHo",
            "maxIHo",
            "COMPLIANCE",
            "qOffsetDl",
            "qOffsetDl",
            "COMPLIANCE",
            "qOffsetDlAfr",
            "qOffsetDlAfr",
            "COMPLIANCE",
            "qOffsetUl",
            "qOffsetUl",
            "COMPLIANCE",
            "qOffsetUlAfr",
            "qOffsetUlAfr",
            "COMPLIANCE",
            "tiHo",
            "tiHo",
            "COMPLIANCE",
            "tMaxiHo",
            "tMaxiHo",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_locatingpenalty():
        return [
            "NodeId",
            "GeranCellId",
            "pSsBq",
            "pSsBq",
            "COMPLIANCE",
            "pSsHf",
            "pSsHf",
            "COMPLIANCE",
            "pSsTa",
            "pSsTa",
            "COMPLIANCE",
            "pTimBq",
            "pTimBq",
            "COMPLIANCE",
            "pTimHf",
            "pTimHf",
            "COMPLIANCE",
            "pTimTa",
            "pTimTa",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_locatingurgency():
        return [
            "NodeId",
            "GeranCellId",
            "cellQ",
            "cellQ",
            "COMPLIANCE",
            "qLimDl",
            "qLimDl",
            "COMPLIANCE",
            "qLimDlAfr",
            "qLimDlAfr",
            "COMPLIANCE",
            "qLimUl",
            "qLimUl",
            "COMPLIANCE",
            "qLimUlAfr",
            "qLimUlAfr",
            "COMPLIANCE",
            "taLim",
            "taLim",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_mobility():
        return [
            "NodeId",
            "GeranCellId",
            "aw",
            "aw",
            "COMPLIANCE",
            "bcchDtcb",
            "bcchDtcb",
            "COMPLIANCE",
            "hystSep",
            "hystSep",
            "COMPLIANCE",
            "maxTa",
            "maxTa",
            "COMPLIANCE",
            "mbcr",
            "mbcr",
            "COMPLIANCE",
            "missNM",
            "missNM",
            "COMPLIANCE",
            "ncrpt",
            "ncrpt",
            "COMPLIANCE",
            "scho",
            "scho",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_msqueuing():
        return [
            "NodeId",
            "GeranCellId",
            "qLength",
            "qLength",
            "COMPLIANCE",
            "resLimit",
            "resLimit",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_powercontrol():
        return [
            "NodeId",
            "GeranCellId",
            "amrPcState",
            "amrPcState",
            "COMPLIANCE",
            "hpbState",
            "hpbState",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_powercontroldownlink():
        return [
            "NodeId",
            "GeranCellId",
            "bsPwrMin",
            "bsPwrMin",
            "COMPLIANCE",
            "bsRPwrOffset",
            "bsRPwrOffset",
            "COMPLIANCE",
            "dBtsPcState",
            "dBtsPcState",
            "COMPLIANCE",
            "dtxD",
            "dtxD",
            "COMPLIANCE",
            "lCompDl",
            "lCompDl",
            "COMPLIANCE",
            "qCompDl",
            "qCompDl",
            "COMPLIANCE",
            "qDesDl",
            "qDesDl",
            "COMPLIANCE",
            "qDesDlAfr",
            "qDesDlAfr",
            "COMPLIANCE",
            "qDesDlAhr",
            "qDesDlAhr",
            "COMPLIANCE",
            "ssDesDl",
            "ssDesDl",
            "COMPLIANCE",
            "ssDesDlAfr",
            "ssDesDlAfr",
            "COMPLIANCE",
            "ssDesDlAhr",
            "ssDesDlAhr",
            "COMPLIANCE",
            "ssDesDlAwb",
            "ssDesDlAwb",
            "COMPLIANCE",
            "ssOffsetDl",
            "ssOffsetDl",
            "COMPLIANCE",
            "ssOffsetDlAfr",
            "ssOffsetDlAfr",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_powercontroluplink():
        return [
            "NodeId",
            "GeranCellId",
            "bsRxMin",
            "bsRxMin",
            "COMPLIANCE",
            "bsRxSuff",
            "bsRxSuff",
            "COMPLIANCE",
            "cchPwr",
            "cchPwr",
            "COMPLIANCE",
            "dmsPcState",
            "dmsPcState",
            "COMPLIANCE",
            "dtxU",
            "dtxU",
            "COMPLIANCE",
            "gamma",
            "gamma",
            "COMPLIANCE",
            "lCompUl",
            "lCompUl",
            "COMPLIANCE",
            "msrPwrOffset",
            "msrPwrOffset",
            "COMPLIANCE",
            "msRxMin",
            "msRxMin",
            "COMPLIANCE",
            "msRxSuff",
            "msRxSuff",
            "COMPLIANCE",
            "msTxPwr",
            "msTxPwr",
            "COMPLIANCE",
            "qCompUl",
            "qCompUl",
            "COMPLIANCE",
            "qDesUl",
            "qDesUl",
            "COMPLIANCE",
            "qDesUlAfr",
            "qDesUlAfr",
            "COMPLIANCE",
            "qDesUlAhr",
            "qDesUlAhr",
            "COMPLIANCE",
            "ssDesUl",
            "ssDesUl",
            "COMPLIANCE",
            "ssDesUlAfr",
            "ssDesUlAfr",
            "COMPLIANCE",
            "ssDesUlAhr",
            "ssDesUlAhr",
            "COMPLIANCE",
            "ssOffsetUl",
            "ssOffsetUl",
            "COMPLIANCE",
            "ssOffsetUlAfr",
            "ssOffsetUlAfr",
            "COMPLIANCE",
            "ssOffsetUlAwb",
            "ssOffsetUlAwb",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_powersavings():
        return [
            "NodeId",
            "GeranCellId",
            "bcchPs",
            "bcchPs",
            "COMPLIANCE",
            "btsPsHyst",
            "btsPsHyst",
            "COMPLIANCE",
            "preCcch",
            "preCcch",
            "COMPLIANCE",
            "pro",
            "pro",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_lchadaptiveconf():
        return [
            "NodeId",
            "GeranCellId",
            "acState",
            "acState",
            "COMPLIANCE",
            "sLevel",
            "sLevel",
            "COMPLIANCE",
            "sTime",
            "sTime",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_radiolinktimeout():
        return [
            "NodeId",
            "GeranCellId",
            "rLinkT",
            "rLinkT",
            "COMPLIANCE",
            "rLinkTaFr",
            "rLinkTaFr",
            "COMPLIANCE",
            "rLinkTaHr",
            "rLinkTaHr",
            "COMPLIANCE",
            "rLinkTAwb",
            "rLinkTAwb",
            "COMPLIANCE",
            "rLinkUp",
            "rLinkUp",
            "COMPLIANCE",
            "rLinkUpAfr",
            "rLinkUpAfr",
            "COMPLIANCE",
            "rLinkUpAhr",
            "rLinkUpAhr",
            "COMPLIANCE",
            "rLinkUpAwb",
            "rLinkUpAwb",
            "COMPLIANCE",
        ]

    @staticmethod
    def header_baseline():
        return [
            "BSC",
            "GeranCell",
            "ManagedObjectClass",
            "Parameter",
            "OssValue",
            "BaselineValue",
            "Compliance",
            "Command",
        ]



    @staticmethod
    def header_result():
        return [
            "BSC",
            "GeraCellId",
            "Location Code",
            "Site Name",
            "Audit Date",
            "Audit By:",
            "GeranCell",
            "SubcellLoadDistribution",
            "RadioLinkTimeout",
            "PowerSavings",
            "PowerControlUplink",
            "PowerControlDownlink",
            "PowerControl",
            "MsQueuing",
            "Mobility",
            "LocatingUrgency",
            "LocatingPenalty",
            "LocatingIntraCellHandover",
            "LocatingFilter",
            "LchAdaptiveConf",
            "InterRanMobility",
            "IdleModeAndPaging",
            "IdleChannelMeasurement",
            "HierarchicalCellStructure",
            "Gprs",
            "GeranCellRelation",
            "DynamicHrAllocation",
            "DynamicFrHrModeAdaption",
            "Dtm",
            "ChannelGroup",
            "ChannelAllocAndOpt",
            "CellLoadSharing",
            "Remaks",
            "Approved by Rogers (Y/N)",
        ]
